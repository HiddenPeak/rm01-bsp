<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RMinte RM-01 板载网络监控系统</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="header">
        <div class="container">
            <h1>RMinte RM-01 板载网络监控系统</h1>
        </div>
    </div>
      <div class="container">
        <button id="refresh" class="refresh-button">刷新数据</button>
        <div id="timestamp">上次更新时间: -</div>
        <div id="status-container"></div>
        
        <div class="section-title">
            <h2>应用模块监控数据</h2>
            <button id="refresh-node-exporter" class="refresh-button">刷新监控数据</button>
        </div>
        <div id="node-exporter-timestamp">上次更新时间: -</div>
        <div id="node-exporter-container">
            <div class="loader">加载中...</div>
        </div>
        
        <footer>
           RMinte RM-01 板载网络监控系统 &copy; 2025
        </footer>
    </div>
      <script>
        document.getElementById('refresh').addEventListener('click', fetchNetworkStatus);
        document.getElementById('refresh-node-exporter').addEventListener('click', fetchNodeExporterMetrics);
        
        // 页面加载时获取数据
        document.addEventListener('DOMContentLoaded', () => {
            fetchNetworkStatus();
            fetchNodeExporterMetrics();
        });
        
        // 自动定期刷新
        setInterval(fetchNetworkStatus, 1000); // 每1秒刷新一次网络状态
        setInterval(fetchNodeExporterMetrics, 5000); // 每5秒刷新一次监控指标
        
        function fetchNetworkStatus() {
            fetch('/api/network')
                .then(response => response.json())
                .then(data => {
                    updateStatusDisplay(data);
                })
                .catch(error => {
                    console.error('获取网络状态失败:', error);
                });
        }        function fetchNodeExporterMetrics() {
            const container = document.getElementById('node-exporter-container');
            container.innerHTML = '<div class="loader">正在获取监控数据...</div>';
            
            // 使用ESP32S3提供的代理API获取Node Exporter指标
            fetch('/api/node-exporter')
                .then(response => response.json())
                .then(data => {
                    // 检查是否有原始数据（用于兼容旧版本）
                    if (data.raw_data) {
                        // 使用旧的解析方法
                        const parsedData = parsePrometheusMetrics(data.raw_data);
                        updateNodeExporterDisplay(parsedData);
                    } else if (data.metrics) {
                        // 使用新的预处理数据
                        updateNodeExporterDisplayFromPreprocessed(data);
                    } else {
                        throw new Error('接收到意外的数据格式');
                    }
                })
                .catch(error => {
                    console.error('获取监控指标失败:', error);
                    container.innerHTML = '<div class="error-message">获取监控数据失败，应用模块可能离线</div>';
                });
        }
        
        function parsePrometheusMetrics(metricsText) {
            // 创建一个结构化数据对象
            const data = {
                timestamp: Math.floor(Date.now() / 1000),
                hostname: '',
                os_info: { name: '', version: '' },
                uptime_seconds: 0,
                process_count: 0,
                cpu: { user: 0, system: 0, idle: 0, iowait: 0 },
                memory: { total: 0, used: 0, free: 0, usage_percent: 0 },
                disk: { total: 0, used: 0, free: 0, usage_percent: 0 },
                network: { receive: 0, transmit: 0, receive_total: 0, transmit_total: 0 }
            };
            
            // 解析每一行指标
            const lines = metricsText.split('\n');
            
            // 提取主机名
            const nodeNameMatch = lines.find(line => line.startsWith('node_uname_info'));
            if (nodeNameMatch) {
                const nodename = nodeNameMatch.match(/nodename="([^"]+)"/);
                if (nodename && nodename[1]) {
                    data.hostname = nodename[1];
                }
                
                // 操作系统信息
                const sysname = nodeNameMatch.match(/sysname="([^"]+)"/);
                const release = nodeNameMatch.match(/release="([^"]+)"/);
                
                if (sysname && sysname[1]) {
                    data.os_info.name = sysname[1];
                }
                if (release && release[1]) {
                    data.os_info.version = release[1];
                }
            }
            
            // 提取启动时间
            const bootTimeMatch = lines.find(line => line.startsWith('node_boot_time_seconds'));
            if (bootTimeMatch) {
                const bootTimeValue = parseFloat(bootTimeMatch.split(' ')[1]);
                if (!isNaN(bootTimeValue)) {
                    const currentTime = Math.floor(Date.now() / 1000);
                    data.uptime_seconds = currentTime - bootTimeValue;
                }
            }
            
            // 提取进程数量
            const processCountMatch = lines.find(line => line.startsWith('node_procs_running'));
            if (processCountMatch) {
                const processCount = parseInt(processCountMatch.split(' ')[1]);
                if (!isNaN(processCount)) {
                    data.process_count = processCount;
                }
            }
            
            // 解析 CPU 使用率
            const cpuUserMatch = lines.find(line => line.startsWith('node_cpu_seconds_total{cpu="0",mode="user"}'));
            const cpuSystemMatch = lines.find(line => line.startsWith('node_cpu_seconds_total{cpu="0",mode="system"}'));
            const cpuIdleMatch = lines.find(line => line.startsWith('node_cpu_seconds_total{cpu="0",mode="idle"}'));
            const cpuIowaitMatch = lines.find(line => line.startsWith('node_cpu_seconds_total{cpu="0",mode="iowait"}'));
            
            if (cpuUserMatch) data.cpu.user = parseFloat(cpuUserMatch.split(' ')[1]) || 0;
            if (cpuSystemMatch) data.cpu.system = parseFloat(cpuSystemMatch.split(' ')[1]) || 0;
            if (cpuIdleMatch) data.cpu.idle = parseFloat(cpuIdleMatch.split(' ')[1]) || 0;
            if (cpuIowaitMatch) data.cpu.iowait = parseFloat(cpuIowaitMatch.split(' ')[1]) || 0;
            
            // 计算 CPU 百分比
            const total = data.cpu.user + data.cpu.system + data.cpu.idle + data.cpu.iowait;
            if (total > 0) {
                data.cpu.user = (data.cpu.user / total) * 100;
                data.cpu.system = (data.cpu.system / total) * 100;
                data.cpu.idle = (data.cpu.idle / total) * 100;
                data.cpu.iowait = (data.cpu.iowait / total) * 100;
            }
            
            // 解析内存信息
            const memTotalMatch = lines.find(line => line.startsWith('node_memory_MemTotal_bytes'));
            const memFreeMatch = lines.find(line => line.startsWith('node_memory_MemFree_bytes'));
            
            if (memTotalMatch) data.memory.total = parseInt(memTotalMatch.split(' ')[1]);
            if (memFreeMatch) data.memory.free = parseInt(memFreeMatch.split(' ')[1]);
            
            data.memory.used = data.memory.total - data.memory.free;
            if (data.memory.total > 0) {
                data.memory.usage_percent = (data.memory.used / data.memory.total) * 100;
            }
            
            // 解析磁盘信息
            const diskTotalMatch = lines.find(line => line.startsWith('node_filesystem_size_bytes{mountpoint="/"}'));
            const diskFreeMatch = lines.find(line => line.startsWith('node_filesystem_free_bytes{mountpoint="/"}'));
            
            if (diskTotalMatch) data.disk.total = parseInt(diskTotalMatch.split(' ')[1]);
            if (diskFreeMatch) data.disk.free = parseInt(diskFreeMatch.split(' ')[1]);
            
            data.disk.used = data.disk.total - data.disk.free;
            if (data.disk.total > 0) {
                data.disk.usage_percent = (data.disk.used / data.disk.total) * 100;
            }
            
            // 解析网络信息
            const netReceiveMatch = lines.find(line => line.startsWith('node_network_receive_bytes_total{device="eth0"}'));
            const netTransmitMatch = lines.find(line => line.startsWith('node_network_transmit_bytes_total{device="eth0"}'));
            
            if (netReceiveMatch) data.network.receive_total = parseInt(netReceiveMatch.split(' ')[1]);
            if (netTransmitMatch) data.network.transmit_total = parseInt(netTransmitMatch.split(' ')[1]);
            
            // 这里只是估计值，因为我们没有历史数据来计算每秒的变化量
            data.network.receive = data.network.receive_total / data.uptime_seconds;
            data.network.transmit = data.network.transmit_total / data.uptime_seconds;
            
            return data;
        }
        
        function updateStatusDisplay(data) {
            const container = document.getElementById('status-container');
            container.innerHTML = '';
            
            // 更新时间戳
            const timestamp = new Date(data.timestamp * 1000).toLocaleString();
            document.getElementById('timestamp').textContent = '上次更新时间: ' + timestamp;
            
            // 更新每个目标的状态
            data.targets.forEach(target => {
                const statusClass = getStatusClass(target.status);
                const indicatorClass = getIndicatorClass(target.status);
                
                const card = document.createElement('div');
                card.className = 'status-card ' + statusClass;
                
                const statusIndicator = `<span class="status-indicator ${indicatorClass}"></span>`;
                
                card.innerHTML = `
                    <h3>${statusIndicator}${target.name} (${target.ip})</h3>
                    <div class="status-details">
                        <div class="status-item">
                            <div class="status-label">状态</div>
                            <div class="status-value">${getStatusText(target.status)}</div>
                        </div>
                        <div class="status-item">
                            <div class="status-label">响应时间</div>
                            <div class="status-value">${target.response_time} ms</div>
                        </div>
                        <div class="status-item">
                            <div class="status-label">丢包率</div>
                            <div class="status-value">${target.loss_rate.toFixed(1)}%</div>
                        </div>
                    </div>
                `;
                
                container.appendChild(card);
            });
        }
        
        function updateNodeExporterDisplay(data) {
            const container = document.getElementById('node-exporter-container');
            container.innerHTML = '';
            
            // 更新时间戳
            const timestamp = new Date(data.timestamp * 1000).toLocaleString();
            document.getElementById('node-exporter-timestamp').textContent = '上次更新时间: ' + timestamp;
            
            // 创建系统信息卡片
            const systemCard = createMetricCard('系统信息', [
                { label: '主机名', value: data.hostname },
                { label: '操作系统', value: `${data.os_info.name} ${data.os_info.version}` },
                { label: '运行时间', value: formatUptime(data.uptime_seconds) },
                { label: '进程数', value: data.process_count }
            ]);
            container.appendChild(systemCard);
            
            // 创建CPU信息卡片
            const cpuCard = createMetricCard('CPU使用率', [
                { label: '用户空间', value: `${data.cpu.user.toFixed(2)}%` },
                { label: '系统空间', value: `${data.cpu.system.toFixed(2)}%` },
                { label: '空闲', value: `${data.cpu.idle.toFixed(2)}%` },
                { label: 'I/O等待', value: `${data.cpu.iowait.toFixed(2)}%` }
            ]);
            container.appendChild(cpuCard);
            
            // 创建内存信息卡片
            const memoryCard = createMetricCard('内存使用情况', [
                { label: '总内存', value: formatBytes(data.memory.total) },
                { label: '已使用', value: formatBytes(data.memory.used) },
                { label: '可用', value: formatBytes(data.memory.free) },
                { label: '使用率', value: `${data.memory.usage_percent.toFixed(1)}%` }
            ]);
            container.appendChild(memoryCard);
            
            // 创建磁盘信息卡片
            const diskCard = createMetricCard('磁盘使用情况', [
                { label: '总容量', value: formatBytes(data.disk.total) },
                { label: '已使用', value: formatBytes(data.disk.used) },
                { label: '可用', value: formatBytes(data.disk.free) },
                { label: '使用率', value: `${data.disk.usage_percent.toFixed(1)}%` }
            ]);
            container.appendChild(diskCard);
            
            // 创建网络信息卡片
            const networkCard = createMetricCard('网络流量', [
                { label: '接收', value: `${formatBytes(data.network.receive)}/s` },
                { label: '发送', value: `${formatBytes(data.network.transmit)}/s` },
                { label: '总接收', value: formatBytes(data.network.receive_total) },
                { label: '总发送', value: formatBytes(data.network.transmit_total) }
            ]);
            container.appendChild(networkCard);
        }
        
        // 添加新函数处理预处理的指标数据
        function updateNodeExporterDisplayFromPreprocessed(data) {
            const container = document.getElementById('node-exporter-container');
            container.innerHTML = '';
            
            // 更新时间戳
            const timestamp = new Date(data.timestamp * 1000).toLocaleString();
            document.getElementById('node-exporter-timestamp').textContent = '上次更新时间: ' + timestamp;
            
            // 从服务器预处理的metrics中提取数据
            const metrics = data.metrics;
            
            // 创建结构化数据对象
            const formattedData = {
                timestamp: data.timestamp,
                hostname: metrics.hostname || 'Unknown',
                os_info: {
                    name: metrics.sysname || 'Unknown',
                    version: metrics.release || ''
                },
                uptime_seconds: metrics.uptime_seconds || 0,
                process_count: metrics.process_count || 0,
                cpu: {
                    user: metrics.cpu_user_percent || 0,
                    system: metrics.cpu_system_percent || 0,
                    idle: metrics.cpu_idle_percent || 0,
                    iowait: metrics.cpu_iowait_percent || 0
                },
                memory: {
                    total: metrics.memory_total || 0,
                    used: metrics.memory_used || 0,
                    free: metrics.memory_free || 0,
                    usage_percent: metrics.memory_usage_percent || 0
                },
                disk: {
                    total: metrics.disk_total || 0,
                    used: metrics.disk_used || 0,
                    free: metrics.disk_free || 0,
                    usage_percent: metrics.disk_usage_percent || 0
                },
                network: {
                    receive: 0,
                    transmit: 0,
                    receive_total: metrics.network_receive_total || 0,
                    transmit_total: metrics.network_transmit_total || 0
                }
            };
            
            // 创建系统信息卡片
            const systemCard = createMetricCard('系统信息', [
                { label: '主机名', value: formattedData.hostname },
                { label: '操作系统', value: `${formattedData.os_info.name} ${formattedData.os_info.version}` },
                { label: '运行时间', value: formatUptime(formattedData.uptime_seconds) },
                { label: '进程数', value: formattedData.process_count }
            ]);
            container.appendChild(systemCard);
            
            // 创建CPU信息卡片
            const cpuCard = createMetricCard('CPU使用率', [
                { label: '用户空间', value: `${formattedData.cpu.user.toFixed(2)}%` },
                { label: '系统空间', value: `${formattedData.cpu.system.toFixed(2)}%` },
                { label: '空闲', value: `${formattedData.cpu.idle.toFixed(2)}%` },
                { label: 'I/O等待', value: `${formattedData.cpu.iowait.toFixed(2)}%` }
            ]);
            container.appendChild(cpuCard);
            
            // 创建内存信息卡片
            const memoryCard = createMetricCard('内存使用情况', [
                { label: '总内存', value: formatBytes(formattedData.memory.total) },
                { label: '已使用', value: formatBytes(formattedData.memory.used) },
                { label: '可用', value: formatBytes(formattedData.memory.free) },
                { label: '使用率', value: `${formattedData.memory.usage_percent.toFixed(1)}%` }
            ]);
            container.appendChild(memoryCard);
            
            // 创建磁盘信息卡片
            const diskCard = createMetricCard('磁盘使用情况', [
                { label: '总容量', value: formatBytes(formattedData.disk.total) },
                { label: '已使用', value: formatBytes(formattedData.disk.used) },
                { label: '可用', value: formatBytes(formattedData.disk.free) },
                { label: '使用率', value: `${formattedData.disk.usage_percent.toFixed(1)}%` }
            ]);
            container.appendChild(diskCard);
            
            // 创建网络信息卡片（如果有网络数据）
            if (metrics.network_receive_total || metrics.network_transmit_total) {
                const networkCard = createMetricCard('网络流量', [
                    { label: '接收', value: `${formatBytes(formattedData.network.receive)}/s` },
                    { label: '发送', value: `${formatBytes(formattedData.network.transmit)}/s` },
                    { label: '总接收', value: formatBytes(formattedData.network.receive_total) },
                    { label: '总发送', value: formatBytes(formattedData.network.transmit_total) }
                ]);
                container.appendChild(networkCard);
            }
            
            // 添加一个刷新信息
            const infoCard = document.createElement('div');
            infoCard.className = 'info-message';
            infoCard.textContent = '使用ESP32S3预处理的指标数据，减少数据传输和前端解析负担';
            container.appendChild(infoCard);
        }
        
        function createMetricCard(title, metrics) {
            const card = document.createElement('div');
            card.className = 'metric-card';
            
            let html = `<h3>${title}</h3><div class="metric-details">`;
            
            metrics.forEach(metric => {
                html += `
                    <div class="metric-item">
                        <div class="metric-label">${metric.label}</div>
                        <div class="metric-value">${metric.value}</div>
                    </div>
                `;
            });
            
            html += '</div>';
            card.innerHTML = html;
            return card;
        }
        
        function formatBytes(bytes) {
            if (bytes === 0) return '0 B';
            
            const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            
            return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + units[i];
        }
        
        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            
            let result = '';
            if (days > 0) result += `${days}天 `;
            if (hours > 0) result += `${hours}小时 `;
            if (minutes > 0) result += `${minutes}分钟 `;
            if (secs > 0 || result === '') result += `${secs}秒`;
            
            return result;
        }
        
        function getStatusClass(status) {
            switch(status) {
                case 'UP': return 'status-up';
                case 'DOWN': return 'status-down';
                default: return 'status-unknown';
            }
        }
        
        function getIndicatorClass(status) {
            switch(status) {
                case 'UP': return 'indicator-up';
                case 'DOWN': return 'indicator-down';
                default: return 'indicator-unknown';
            }
        }
        
        function getStatusText(status) {
            switch(status) {
                case 'UP': return '已连接';
                case 'DOWN': return '已断开';
                default: return '未知';
            }
        }
    </script>
</body>
</html>
